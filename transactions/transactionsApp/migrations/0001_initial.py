# Generated by Django 5.2.4 on 2025-09-11 14:29

import datetime
import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=150, unique=True, verbose_name='Username*')),
                ('job', models.CharField(blank=True, max_length=100, null=True)),
                ('cash', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Cash*')),
                ('debt', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=12, null=True)),
                ('debt_timeframe', models.DateTimeField(blank=True, null=True)),
                ('currency', models.CharField(choices=[('EUR', 'EUR (€)'), ('USD', 'USD ($)'), ('GBP', 'GBP (£)'), ('JPY', 'JPY (¥)'), ('SEK', 'SEK (Kr)'), ('CHF', 'CHF (₣)')], max_length=10, verbose_name='Currency*')),
                ('convert_currency', models.BooleanField(default=False)),
                ('initial_currency', models.CharField(blank=True, choices=[('EUR', 'EUR (€)'), ('USD', 'USD ($)'), ('GBP', 'GBP (£)'), ('JPY', 'JPY (¥)'), ('SEK', 'SEK (Kr)'), ('CHF', 'CHF (₣)')], max_length=10, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Analytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('all_assets', models.BooleanField(default=False)),
                ('cash', models.BooleanField(default=False)),
                ('card', models.BooleanField(default=False)),
                ('choose_card', models.CharField(max_length=40)),
                ('income_transactions', models.BooleanField(default=False)),
                ('expense_transactions', models.BooleanField(default=False)),
                ('subscriptions', models.BooleanField(default=False)),
                ('compute_statistics_from', models.DateField(blank=True, null=True, verbose_name='From')),
                ('compute_statistics_to', models.DateField(blank=True, null=True, verbose_name='Until')),
                ('currency', models.CharField(choices=[('EUR', 'EUR (€)'), ('USD', 'USD ($)'), ('GBP', 'GBP (£)'), ('JPY', 'JPY (¥)'), ('SEK', 'SEK (Kr)'), ('CHF', 'CHF (₣)')], default=('EUR', 'EUR (€)'), max_length=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_type', models.CharField(choices=[('Credit Card', 'Credit Card'), ('Debit Card', 'Debit Card'), ('Prepaid Card', 'Prepaid Card'), ('Virtual Card', 'Virtual Card')], default='Prepaid Card', max_length=20, verbose_name='Card type*')),
                ('card_number', models.CharField(max_length=16, unique=True)),
                ('cvv', models.CharField(max_length=3)),
                ('expiration_date', models.CharField(max_length=10)),
                ('balance', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Balance*')),
                ('currency', models.CharField(choices=[('EUR', 'EUR (€)'), ('USD', 'USD ($)'), ('GBP', 'GBP (£)'), ('JPY', 'JPY (¥)'), ('SEK', 'SEK (Kr)'), ('CHF', 'CHF (₣)')], default=('EUR', 'EUR (€)'), max_length=10, verbose_name='Currency*')),
                ('initial_currency', models.CharField(blank=True, choices=[('EUR', 'EUR (€)'), ('USD', 'USD ($)'), ('GBP', 'GBP (£)'), ('JPY', 'JPY (¥)'), ('SEK', 'SEK (Kr)'), ('CHF', 'CHF (₣)')], max_length=10, null=True)),
                ('convert_currency', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='Title*')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_method', models.CharField(choices=[('Cash', 'Cash'), ('Card', 'Card')], default='Cash', max_length=10, verbose_name='Payment method*')),
                ('card_number', models.CharField(blank=True, help_text='Insert your 16-digit number card.', max_length=16, null=True)),
                ('cvv', models.CharField(blank=True, help_text='Insert your CVV number.', max_length=3, null=True)),
                ('expiration_date', models.CharField(blank=True, help_text='Example: 04/26', max_length=10, null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Amount*')),
                ('currency', models.CharField(choices=[('EUR', 'EUR (€)'), ('USD', 'USD ($)'), ('GBP', 'GBP (£)'), ('JPY', 'JPY (¥)'), ('SEK', 'SEK (Kr)'), ('CHF', 'CHF (₣)')], max_length=10, verbose_name='Currency*')),
                ('type', models.CharField(choices=[('Income', 'Income'), ('Expense', 'Expense')], default='Expense', max_length=10, verbose_name='Type*')),
                ('transaction_date', models.DateField(auto_now=True)),
                ('recurring', models.BooleanField(help_text='Subscription payments are only permitted via card.')),
                ('subscription_start_date', models.DateField(blank=True, null=True)),
                ('subscription_end_date', models.DateField(blank=True, null=True)),
                ('recurrence_choices', models.CharField(choices=[('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Yearly', 'Yearly')], max_length=10)),
                ('subscription_next_paid_date', models.DateField(blank=True, default=datetime.date(2025, 9, 11), null=True)),
                ('message', models.CharField(blank=True, max_length=200, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='transactionsApp.category', verbose_name='Category*')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
